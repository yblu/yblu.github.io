<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Oo | luyunbo's Blog]]></title>
  <link href="http://yblu.github.io/blog/categories/oo/atom.xml" rel="self"/>
  <link href="http://yblu.github.io/"/>
  <updated>2016-03-15T12:03:00+08:00</updated>
  <id>http://yblu.github.io/</id>
  <author>
    <name><![CDATA[Lu Yunbo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[经典面试题atoi]]></title>
    <link href="http://yblu.github.io/blog/2014/12/17/atoi-implementation/"/>
    <updated>2014-12-17T00:00:00+08:00</updated>
    <id>http://yblu.github.io/blog/2014/12/17/atoi-implementation</id>
    <content type="html"><![CDATA[<h2>功能简介</h2>

<p>atoi是把字符串转换成长整型数的一种函数</p>

<h2>linux c库函数实现</h2>

<pre><code>/***
*long atol(char *nptr) - Convert string to long
*
*Purpose:
*       Converts ASCII string pointed to by nptr to binary.
*       Overflow is not detected.
*
*Entry:
*       nptr = ptr to string to convert
*
*Exit:
*       return long int value of the string
*
*Exceptions:
*       None - overflow is not detected.
*
*******************************************************************************/

long __cdecl atol(
        const char *nptr
        )
{
    int c;              /* current char */
    long total;         /* current total */
    int sign;           /* if '-', then negative, otherwise positive */

    /* skip whitespace */
    while ( isspace((int)(unsigned char)*nptr) )
        ++nptr;

    c = (int)(unsigned char)*nptr++;
    sign = c;           /* save sign indication */
    if (c == '-' || c == '+')
        c = (int)(unsigned char)*nptr++;    /* skip sign */

    total = 0;

    while (isdigit(c)) {
        total = 10 * total + (c - '0');     /* accumulate digit */
        c = (int)(unsigned char)*nptr++;    /* get next char */
    }

    if (sign == '-')
        return -total;
    else
        return total;   /* return result, negated if necessary */
}


/***
*int atoi(char *nptr) - Convert string to long
*
*Purpose:
*       Converts ASCII string pointed to by nptr to binary.
*       Overflow is not detected.  Because of this, we can just use
*       atol().
*
*Entry:
*       nptr = ptr to string to convert
*
*Exit:
*       return int value of the string
*
*Exceptions:
*       None - overflow is not detected.
*
*******************************************************************************/

int __cdecl atoi(
        const char *nptr
        )
{
        return (int)atol(nptr);
}
</code></pre>

<p>面试官至少会期待应聘都能够在不需要提示的情况下，考虑到输入的字符串中有非数字字符和正负号，要考虑到最大的正整数和最小的负整数以及溢出。同时面试试还期待应聘者能够考虑到当输入的字符串不能转换成整数时，应该如何做错误处理。</p>

<p>1、检查字符串是否为空</p>

<p>2、对非法输入，返回0，并设置全局变量</p>

<p>3、溢出</p>

<p>4、空字符串""</p>

<p>5、输入字符串只有"+&ldquo;或&rdquo;-&ldquo;号</p>

<pre><code>// StringToInt.cpp : Defines the entry point for the console application.
//

// 《剑指Offer——名企面试官精讲典型编程题》代码
// 著作权所有者：何海涛

#include "stdafx.h"
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

long long StrToIntCore(const char* str, bool minus);

enum Status {kValid = 0, kInvalid};
int g_nStatus = kValid;

int StrToInt(const char* str)
{
        g_nStatus = kInvalid;
        long long num = 0;

    if(str != NULL &amp;&amp; *str != '\0') 
    {
        bool minus = false;
        if(*str == '+')
            str ++;
        else if(*str == '-') 
        {
            str ++;
            minus = true;
        }

        if(*str != '\0') 
        {
            num = StrToIntCore(str, minus);
        }
    }

    return (int)num;
}

long long StrToIntCore(const char* digit, bool minus)
{
    long long num = 0;

    while(*digit != '\0') 
    {
        if(*digit &gt;= '0' &amp;&amp; *digit &lt;= '9') 
        {
            int flag = minus ? -1 : 1;
            num = num * 10 + flag * (*digit - '0');

            if((!minus &amp;&amp; num &gt; 0x7FFFFFFF) 
                || (minus &amp;&amp; num &lt; (signed int)0x80000000))
            {
                num = 0;
                break;
            }

            digit++;
        }
        else 
        {
            num = 0;
            break;
        }
    }

    if(*digit == '\0') 
    {
        g_nStatus = kValid;
    }

    return num;
}

// ====================测试代码====================
void Test(char* string)
{
    int result = StrToInt(string);
    if(result == 0 &amp;&amp; g_nStatus == kInvalid)
        printf("the input %s is invalid.\n", string);
    else
        printf("number for %s is: %d.\n", string, result);
}

int _tmain(int argc, _TCHAR* argv[])
{
    Test(NULL);

    Test("");

    Test("123");

    Test("+123");

    Test("-123");

    Test("1a33");

    Test("+0");

    Test("-0");

    //有效的最大正整数, 0x7FFFFFFF
    Test("+2147483647");    

    Test("-2147483647");

    Test("+2147483648");

    //有效的最小负整数, 0x80000000
    Test("-2147483648");    

    Test("+2147483649");

    Test("-2147483649");

    Test("+");

    Test("-");

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面向对象的编程语言的特征]]></title>
    <link href="http://yblu.github.io/blog/2014/12/15/leanring-note/"/>
    <updated>2014-12-15T00:00:00+08:00</updated>
    <id>http://yblu.github.io/blog/2014/12/15/leanring-note</id>
    <content type="html"><![CDATA[<p>有以下有4个主要特征</p>

<h4>封装</h4>

<p>封装是保证软件部件具有优良的模块性的基础，封装的目标就是要实现软件部件的“高内聚、低耦合”，防止程序相互依赖性而带来的变动影响。在面向对象的编程语言中，对象是封装
的最基本单位，面向对象的封装比传统语言的封装更为清晰、更为有力。面向对象的封装就
是把描述一个对象的属性和行为的代码封装在一个“模块”中，也就是一个类中，属性用变量
定义，行为用方法进行定义，方法可以直接访问同一个对象中的属性。通常情况下，只要记
住让变量和访问这个变量的方法放在一起，将一个类中的成员变量全部定义成私有的，只
有这个类自己的方法才可以访问到这些成员变量，这就基本上实现对象的封装，就很容易
找出要分配到这个类上的方法了，就基本上算是会面向对象的编程了。把握一个原则：把
对同一事物进行操作的方法和相关的方法放在同一个类中，把方法和它操作的数据放在同
一个类中。</p>

<p>例如，人要在黑板上画圆，这一共涉及三个对象：人、黑板、圆，画圆的方法要分配给哪个
对象呢？由于画圆需要使用到圆心和半径，圆心和半径显然是圆的属性，如果将它们在类中
定义成了私有的成员变量，那么，画圆的方法必须分配给圆，它才能访问到圆心和半径这两
个属性，人以后只是调用圆的画圆方法、表示给圆发给消息而已，画圆这个方法不应该分配
在人这个对象上，这就是面向对象的封装性，即将对象封装成一个高度自治和相对封闭的
个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变。一个更便于理解
的例子就是，司机将火车刹住了，刹车的动作是分配给司机，还是分配给火车，显然，应该
分配给火车，因为司机自身是不可能有那么大的力气将一个火车给停下来的，只有火车自己
才能完成这一动作，火车需要调用内部的离合器和刹车片等多个器件协作才能完成刹车这个
动作，司机刹车的过程只是给火车发了一个消息，通知火车要执行刹车动作而已。</p>

<h4>抽象</h4>

<p>抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些
事物的相似和共性之处，并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与
当前目标有关的方面。例如，看到一只蚂蚁和大象，你能够想象出它们的相同之处，那就是
抽象。抽象包括行为抽象和状态抽象两个方面。例如，定义一个Person类，如下：</p>

<pre><code>classPerson{
    string name;
    int age;
</code></pre>

<p>人本来是很复杂的事物，有很多方面，但因为当前系统只需要了解人的姓名和年龄，所以上
面定义的类中只包含姓名和年龄这两个属性，这就是一种抽像，使用抽象可以避免考虑一些
与目标无关的细节。我对抽象的理解就是不要用显微镜去看一个事物的所有方面，这样涉及
的内容就太多了，而是要善于划分问题的边界，当前系统需要什么，就只考虑什么。</p>

<h4>继承</h4>

<p>在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在
的类所定义的内容作为自己的内容，并可以加入若干新的内容，或修改原来的方法使之更适
合特殊的需要，这就是继承。继承是子类自动共享父类数据和方法的机制，这是类之间的一
种关系，提高了软件的可重用性和可扩展性。</p>

<h4>多态</h4>

<p>多态是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编
程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，
该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。
因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到
各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以
改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。多态性
增强了软件的灵活性和扩展性。</p>
]]></content>
  </entry>
  
</feed>
